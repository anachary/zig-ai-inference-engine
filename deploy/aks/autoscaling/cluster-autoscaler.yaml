# Azure Cluster Autoscaler Configuration for Zig AI
apiVersion: v1
kind: ConfigMap
metadata:
  name: cluster-autoscaler-config
  namespace: kube-system
data:
  cluster-autoscaler.yaml: |
    azure:
      cluster_autoscaler:
        # Basic configuration
        enabled: true
        min_nodes: 3
        max_nodes: 50
        
        # Scaling behavior
        scale_down_delay_after_add: "10m"
        scale_down_delay_after_delete: "10s"
        scale_down_delay_after_failure: "3m"
        scale_down_unneeded_time: "10m"
        scale_down_utilization_threshold: 0.5
        
        # Node group configurations
        node_groups:
          # CPU nodes for coordinator and general workloads
          - name: "cpu-nodes"
            min_size: 1
            max_size: 10
            vm_size: "Standard_D8s_v3"
            labels:
              node-type: "cpu"
              workload: "coordinator"
            taints: []
            
          # GPU nodes for AI inference shards
          - name: "gpu-nodes"
            min_size: 2
            max_size: 20
            vm_size: "Standard_NC24s_v3"
            labels:
              node-type: "gpu"
              workload: "inference"
              accelerator: "nvidia-tesla-v100"
            taints:
              - key: "nvidia.com/gpu"
                value: "true"
                effect: "NoSchedule"
                
          # High-memory nodes for large models
          - name: "memory-nodes"
            min_size: 0
            max_size: 5
            vm_size: "Standard_M128s"
            labels:
              node-type: "memory"
              workload: "large-models"
            taints:
              - key: "large-memory"
                value: "true"
                effect: "NoSchedule"
                
          # Spot instances for cost optimization
          - name: "spot-nodes"
            min_size: 0
            max_size: 15
            vm_size: "Standard_NC6s_v3"
            priority: "Spot"
            eviction_policy: "Delete"
            max_price: 0.5  # USD per hour
            labels:
              node-type: "spot"
              workload: "inference"
              cost-optimized: "true"
            taints:
              - key: "spot-instance"
                value: "true"
                effect: "NoSchedule"
        
        # Advanced settings
        skip_nodes_with_local_storage: false
        skip_nodes_with_system_pods: false
        max_node_provision_time: "15m"
        max_nodes_total: 50
        cores_total: "0:5000"
        memory_total: "0:5000000"  # 5TB
        
        # Azure-specific settings
        azure_config:
          resource_group: "zig-ai-rg"
          vm_type: "vmss"  # Virtual Machine Scale Sets
          location: "eastus"
          subscription_id: "${AZURE_SUBSCRIPTION_ID}"
          tenant_id: "${AZURE_TENANT_ID}"
          
        # Monitoring and logging
        logging:
          level: "info"
          format: "json"
          
        metrics:
          enabled: true
          port: 8085
          
        # Cost optimization
        cost_optimization:
          enabled: true
          prefer_spot_instances: true
          max_hourly_cost: 200  # USD
          
        # Scheduling preferences
        scheduling:
          # Prefer nodes with GPU for inference workloads
          node_affinity:
            inference_workloads:
              preferred:
                - weight: 100
                  preference:
                    matchExpressions:
                    - key: "accelerator"
                      operator: "In"
                      values: ["nvidia-tesla-v100", "nvidia-tesla-k80"]
                      
            # Prefer CPU nodes for coordinator
            coordinator_workloads:
              preferred:
                - weight: 100
                  preference:
                    matchExpressions:
                    - key: "node-type"
                      operator: "In"
                      values: ["cpu"]

---
# Cluster Autoscaler Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cluster-autoscaler
  namespace: kube-system
  labels:
    app: cluster-autoscaler
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cluster-autoscaler
  template:
    metadata:
      labels:
        app: cluster-autoscaler
    spec:
      serviceAccountName: cluster-autoscaler
      containers:
      - image: k8s.gcr.io/autoscaling/cluster-autoscaler:v1.28.0
        name: cluster-autoscaler
        resources:
          limits:
            cpu: 100m
            memory: 300Mi
          requests:
            cpu: 100m
            memory: 300Mi
        command:
        - ./cluster-autoscaler
        - --v=4
        - --stderrthreshold=info
        - --cloud-provider=azure
        - --skip-nodes-with-local-storage=false
        - --expander=least-waste
        - --node-group-auto-discovery=asg:tag=k8s.io/cluster-autoscaler/enabled,k8s.io/cluster-autoscaler/zig-ai-aks
        - --balance-similar-node-groups
        - --scale-down-delay-after-add=10m
        - --scale-down-unneeded-time=10m
        - --scale-down-utilization-threshold=0.5
        - --max-node-provision-time=15m
        env:
        - name: ARM_SUBSCRIPTION_ID
          valueFrom:
            secretKeyRef:
              name: cluster-autoscaler-azure
              key: subscription-id
        - name: ARM_RESOURCE_GROUP
          valueFrom:
            secretKeyRef:
              name: cluster-autoscaler-azure
              key: resource-group
        - name: ARM_TENANT_ID
          valueFrom:
            secretKeyRef:
              name: cluster-autoscaler-azure
              key: tenant-id
        - name: ARM_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: cluster-autoscaler-azure
              key: client-id
        - name: ARM_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: cluster-autoscaler-azure
              key: client-secret
        - name: ARM_VM_TYPE
          value: "vmss"
        - name: ARM_CLUSTER_NAME
          value: "zig-ai-aks"
        volumeMounts:
        - name: ssl-certs
          mountPath: /etc/ssl/certs/ca-certificates.crt
          readOnly: true
      volumes:
      - name: ssl-certs
        hostPath:
          path: /etc/ssl/certs/ca-certificates.crt

---
# Service Account for Cluster Autoscaler
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cluster-autoscaler
  namespace: kube-system
  labels:
    k8s-addon: cluster-autoscaler.addons.k8s.io
    k8s-app: cluster-autoscaler

---
# ClusterRole for Cluster Autoscaler
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cluster-autoscaler
  labels:
    k8s-addon: cluster-autoscaler.addons.k8s.io
    k8s-app: cluster-autoscaler
rules:
- apiGroups: [""]
  resources: ["events", "endpoints"]
  verbs: ["create", "patch"]
- apiGroups: [""]
  resources: ["pods/eviction"]
  verbs: ["create"]
- apiGroups: [""]
  resources: ["pods/status"]
  verbs: ["update"]
- apiGroups: [""]
  resources: ["endpoints"]
  resourceNames: ["cluster-autoscaler"]
  verbs: ["get", "update"]
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["watch", "list", "get", "update"]
- apiGroups: [""]
  resources: ["pods", "services", "replicationcontrollers", "persistentvolumeclaims", "persistentvolumes"]
  verbs: ["watch", "list", "get"]
- apiGroups: ["extensions"]
  resources: ["replicasets", "daemonsets"]
  verbs: ["watch", "list", "get"]
- apiGroups: ["policy"]
  resources: ["poddisruptionbudgets"]
  verbs: ["watch", "list"]
- apiGroups: ["apps"]
  resources: ["statefulsets", "replicasets", "daemonsets"]
  verbs: ["watch", "list", "get"]
- apiGroups: ["storage.k8s.io"]
  resources: ["storageclasses", "csinodes"]
  verbs: ["watch", "list", "get"]
- apiGroups: ["batch", "extensions"]
  resources: ["jobs"]
  verbs: ["get", "list", "watch", "patch"]
- apiGroups: ["coordination.k8s.io"]
  resources: ["leases"]
  verbs: ["create"]
- apiGroups: ["coordination.k8s.io"]
  resourceNames: ["cluster-autoscaler"]
  resources: ["leases"]
  verbs: ["get", "update"]

---
# ClusterRoleBinding for Cluster Autoscaler
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cluster-autoscaler
  labels:
    k8s-addon: cluster-autoscaler.addons.k8s.io
    k8s-app: cluster-autoscaler
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-autoscaler
subjects:
- kind: ServiceAccount
  name: cluster-autoscaler
  namespace: kube-system

---
# Azure credentials secret (to be created separately)
apiVersion: v1
kind: Secret
metadata:
  name: cluster-autoscaler-azure
  namespace: kube-system
type: Opaque
data:
  # These should be base64 encoded values
  subscription-id: # Base64 encoded Azure subscription ID
  resource-group: # Base64 encoded resource group name
  tenant-id: # Base64 encoded Azure tenant ID
  client-id: # Base64 encoded service principal client ID
  client-secret: # Base64 encoded service principal client secret

---
# Priority Classes for workload scheduling
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: zig-ai-critical
value: 1000
globalDefault: false
description: "Critical priority class for Zig AI coordinator"

---
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: zig-ai-high
value: 800
globalDefault: false
description: "High priority class for Zig AI inference shards"

---
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: zig-ai-normal
value: 500
globalDefault: false
description: "Normal priority class for Zig AI workloads"

---
# Node Pool Autoscaler Custom Resource (if using AKS node pool autoscaler)
apiVersion: v1
kind: ConfigMap
metadata:
  name: nodepool-autoscaler-config
  namespace: kube-system
data:
  config.yaml: |
    nodePools:
      - name: "gpunodes"
        minNodes: 2
        maxNodes: 20
        vmSize: "Standard_NC24s_v3"
        enableAutoScaling: true
        scaleDownMode: "Delete"
        
      - name: "cpunodes"
        minNodes: 1
        maxNodes: 10
        vmSize: "Standard_D8s_v3"
        enableAutoScaling: true
        scaleDownMode: "Deallocate"
        
      - name: "spotnodes"
        minNodes: 0
        maxNodes: 15
        vmSize: "Standard_NC6s_v3"
        enableAutoScaling: true
        scaleSetPriority: "Spot"
        scaleSetEvictionPolicy: "Delete"
        spotMaxPrice: 0.5
