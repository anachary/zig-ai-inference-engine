# Multi-stage build for Zig AI Shard
FROM nvidia/cuda:11.8-devel-ubuntu22.04 AS builder

# Install dependencies
RUN apt-get update && apt-get install -y \
    curl \
    xz-utils \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Install Zig
RUN curl -L https://ziglang.org/download/0.11.0/zig-linux-x86_64-0.11.0.tar.xz | tar -xJ -C /opt
ENV PATH="/opt/zig-linux-x86_64-0.11.0:${PATH}"

# Set working directory
WORKDIR /app

# Copy source code
COPY . .

# Build the shard server
RUN zig build -Doptimize=ReleaseFast

# Production stage
FROM nvidia/cuda:11.8-runtime-ubuntu22.04

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    ca-certificates \
    curl \
    libnvidia-ml1 \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN groupadd -r zigai && useradd -r -g zigai zigai

# Create directories
RUN mkdir -p /app/bin /app/config /app/logs /app/data /app/models \
    && chown -R zigai:zigai /app

# Copy built binaries
COPY --from=builder /app/zig-out/bin/zig-model-server /app/bin/
COPY --from=builder /app/projects/zig-model-server/src /app/src/
COPY --from=builder /app/projects/zig-inference-engine/src /app/inference/
COPY --from=builder /app/projects/zig-tensor-core/src /app/tensor/

# Copy configuration files
COPY deploy/aks/config/shard.yaml /app/config/
COPY deploy/aks/scripts/entrypoint-shard.sh /app/bin/

# Make scripts executable
RUN chmod +x /app/bin/entrypoint-shard.sh /app/bin/zig-model-server

# Switch to non-root user
USER zigai

# Set working directory
WORKDIR /app

# Expose ports
EXPOSE 8080 9090 9091

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=120s --retries=3 \
    CMD curl -f http://localhost:8080/api/v1/health || exit 1

# Set entrypoint
ENTRYPOINT ["/app/bin/entrypoint-shard.sh"]
CMD ["shard", "--config", "/app/config/shard.yaml"]
